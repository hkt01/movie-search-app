{"version":3,"sources":["components/ResultItem/ResultItem.jsx","components/Spinner/Spinner.jsx","views/Home.jsx","components/Review/Review.jsx","views/Movie.jsx","App.js","serviceWorker.js","index.js"],"names":["ResultItem","props","movie","Row","className","Col","src","Poster","alt","Title","Year","to","imdbID","Spinner","useState","show","setShow","enableSpinner","useEffect","timer","setTimeout","clearTimeout","Home","movies","setMovies","loading","setLoading","loadError","setLoadingError","textInput","React","createRef","search","e","preventDefault","val","searchVal","current","value","fetch","process","then","response","json","result","catch","console","log","JSON","stringify","Container","Form","onSubmit","Group","as","controlId","Control","type","ref","Button","varian","onClick","length","map","index","key","Alert","variant","Review","review","multimedia","headline","byline","publication_date","summary_short","href","link","url","target","rel","suggested_link_text","Movie","setMovie","reviews","setReviews","loadingReviews","setLoadingReviews","history","useHistory","title","match","params","push","results","getreview","getMovie","Plot","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af9a6a6a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport default function ResultItem(props) {\r\n  const {movie} = props;\r\n  return (\r\n    <Row className=\"movieRow\">\r\n      <Col className=\"col-4\">\r\n        <img src={movie.Poster} alt={movie.Title} />\r\n      </Col>\r\n      <Col>\r\n        <h4>{movie.Title}</h4>\r\n        <span>{movie.Year}</span>\r\n        <Link to={'/movie/'+movie.imdbID} className=\"block\">See details and reviews</Link>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport \"./spinner.css\";\r\n\r\n/**\r\n * Spinner component to display data being loaded (with hooks).\r\n */\r\nfunction Spinner() {\r\n  // Set state\r\n  const [show, setShow] = useState(false);\r\n\r\n  // Set timeout on mounting\r\n  useEffect(() => {\r\n    const timer = setTimeout(enableSpinner, 250);\r\n\r\n    // Cleanup after unmounting\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  });\r\n\r\n  function enableSpinner() {\r\n    setShow(true);\r\n  }\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n  return <div className=\"loader\">Loading...</div>;\r\n}\r\n\r\nexport default Spinner;\r\n","import React, {useState} from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport ResultItem from '../components/ResultItem/ResultItem';\r\nimport Spinner from '../components/Spinner/Spinner';\r\n\r\nfunction Home() {\r\n  // Set state\r\n  const [movies, setMovies] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadError, setLoadingError] = useState(null);\r\n\r\n  // Ref to search input\r\n  let textInput = React.createRef();\r\n\r\n  function search(e) {\r\n    e.preventDefault();\r\n    const searchVal = textInput.current.value;\r\n    searchMovies(searchVal);\r\n  }\r\n\r\n  function searchMovies(val){\r\n        setLoading(true);\r\n\r\n        fetch(process.env.REACT_APP_API_URL+'/movies?search='+val)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setMovies(result);\r\n                setLoading(false);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                setLoading(false);\r\n                setLoadingError(JSON.stringify(e));\r\n            });\r\n    };\r\n\r\n  return (\r\n\r\n    <Container className=\"homeContainer\">\r\n      <Row>\r\n        <h3>What would you like to see?</h3>\r\n      </Row>\r\n      <Row>\r\n        <Form onSubmit={search}>\r\n          <Form.Group as={Row} controlId=\"search\" className=\"searchRow\">\r\n            <Form.Control type=\"text\" ref={textInput} />\r\n            <Button type=\"submit\" varian=\"primary\" onClick={search}>Search</Button>\r\n          </Form.Group>\r\n        </Form>\r\n      </Row>\r\n      { movies &&\r\n        <div className=\"searchResults\">\r\n          { movies.length > 0 ?\r\n            (movies.map((movie, index) => (\r\n            <ResultItem movie={movie} key={index}/>\r\n          ))) :\r\n          (<Alert variant=\"warning\">No movies found with that query! Maybe try something different?</Alert>)\r\n        }\r\n        </div>\r\n      }\r\n\r\n      { loading &&\r\n        <Spinner />\r\n      }\r\n\r\n      { loadError &&\r\n        <Alert variant=\"danger\">{loadError}</Alert>\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport default function Review(props) {\r\n  const {review} = props;\r\n  return (\r\n    <Row className=\"reviewRow\">\r\n      { review.multimedia &&\r\n        <Col className=\"col-4\">\r\n          <img src={review.multimedia.src} alt={review.multimedia.type} />\r\n        </Col>\r\n      }\r\n      <Col>\r\n        <h4>{review.headline}</h4>\r\n        <span className=\"author\">By {review.byline}</span><span>{review.publication_date}</span>\r\n        <p>{review.summary_short}</p>\r\n        <a href={review.link.url} target=\"_blank\" rel=\"noopener noreferrer\">{review.link.suggested_link_text}</a>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import React, {useState, useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport Spinner from '../components/Spinner/Spinner';\r\nimport Review from '../components/Review/Review';\r\n\r\nfunction Movie(props) {\r\n\r\n  // Set state\r\n  const [movie, setMovie] = useState(null);\r\n  const [reviews, setReviews] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [loadingReviews, setLoadingReviews] = useState(true);\r\n  const [loadError, setLoadingError] = useState(null);\r\n\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    // Get imdbID from url params\r\n    const { title } = props.match.params;\r\n\r\n    // No movie defined, return to frontpage\r\n    if(!title) {\r\n      history.push('/');\r\n      return null;\r\n    }\r\n\r\n    function getMovie(title) {\r\n      // Fetch movie data\r\n      fetch(process.env.REACT_APP_API_URL+'/movies/'+title)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n          getreview(result.Title);\r\n          setMovie(result);\r\n          setLoading(false);\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n          setLoading(false);\r\n          setLoadingError(JSON.stringify(e));\r\n        });\r\n    }\r\n\r\n    function getreview(title) {\r\n      // Fetch reviews for movie\r\n      fetch(process.env.REACT_APP_API_URL+'/reviews?search='+title)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            setReviews(result.results);\r\n            setLoadingReviews(false);\r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n            setLoadingReviews(false);\r\n            setLoadingError(JSON.stringify(e));\r\n        });\r\n    }\r\n\r\n    getMovie(title);\r\n\r\n  }, [props, history]);\r\n\r\n  return (\r\n    <Container className=\"movieContainer\">\r\n      { movie &&\r\n        <Row>\r\n          <Col className=\"col-4\">\r\n            <img src={movie.Poster} alt={movie.Title} />\r\n          </Col>\r\n          <Col>\r\n            <h3>{movie.Title}</h3>\r\n            <span>{movie.Year}</span>\r\n            <p>{movie.Plot}</p>\r\n\r\n            { reviews &&\r\n              <>\r\n                <h4>Reviews:</h4>\r\n                { reviews.length > 0 && reviews.map((review, index) => (\r\n                  <Review review={review} key={index} />\r\n                ))}\r\n\r\n                { reviews.length === 0 &&\r\n                  <Row className=\"reviewRow\"><span>No reviews found!</span></Row>\r\n                }\r\n              </>\r\n            }\r\n            { loadingReviews &&\r\n              <Spinner />\r\n            }\r\n          </Col>\r\n        </Row>\r\n      }\r\n\r\n      { loading &&\r\n        <Spinner />\r\n      }\r\n\r\n      { loadError &&\r\n        <Alert variant=\"danger\">{loadError}</Alert>\r\n      }\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Movie;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Home from './views/Home';\nimport Movie from './views/Movie';\n\nfunction App() {\n  return (\n    <Router>\n      <header className=\"App-header text-center\">\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n          <a href=\"/\" className=\"navbar-brand\">Movie Search App</a>\n        </nav>\n      </header>\n\n      <Switch>\n        <Route path=\"/movie/:title\" component={Movie} />\n        <Route path=\"/\" component={Home}/>\n      </Switch>\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}